// automatically generated by the FlatBuffers compiler, do not modify

package Game.model;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Score extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Score getRootAsScore(ByteBuffer _bb) { return getRootAsScore(_bb, new Score()); }
  public static Score getRootAsScore(ByteBuffer _bb, Score obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Score __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int player() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int steps() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean won() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int comboScore() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createScore(FlatBufferBuilder builder,
      int player,
      int steps,
      boolean won,
      int comboScore) {
    builder.startTable(4);
    Score.addComboScore(builder, comboScore);
    Score.addSteps(builder, steps);
    Score.addPlayer(builder, player);
    Score.addWon(builder, won);
    return Score.endScore(builder);
  }

  public static void startScore(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addPlayer(FlatBufferBuilder builder, int player) { builder.addInt(0, player, 0); }
  public static void addSteps(FlatBufferBuilder builder, int steps) { builder.addInt(1, steps, 0); }
  public static void addWon(FlatBufferBuilder builder, boolean won) { builder.addBoolean(2, won, false); }
  public static void addComboScore(FlatBufferBuilder builder, int comboScore) { builder.addInt(3, comboScore, 0); }
  public static int endScore(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Score get(int j) { return get(new Score(), j); }
    public Score get(Score obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ScoreT unpack() {
    ScoreT _o = new ScoreT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ScoreT _o) {
    int _oPlayer = player();
    _o.setPlayer(_oPlayer);
    int _oSteps = steps();
    _o.setSteps(_oSteps);
    boolean _oWon = won();
    _o.setWon(_oWon);
    int _oComboScore = comboScore();
    _o.setComboScore(_oComboScore);
  }
  public static int pack(FlatBufferBuilder builder, ScoreT _o) {
    if (_o == null) return 0;
    return createScore(
      builder,
      _o.getPlayer(),
      _o.getSteps(),
      _o.getWon(),
      _o.getComboScore());
  }
}

