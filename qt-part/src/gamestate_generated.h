// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTATE_GAME_MODEL_H_
#define FLATBUFFERS_GENERATED_GAMESTATE_GAME_MODEL_H_

#include "flatbuffers/flatbuffers.h"

namespace Game {
namespace model {

struct GameState;
struct GameStateBuilder;
struct GameStateT;

struct GameStateT : public flatbuffers::NativeTable {
  typedef GameState TableType;
  std::vector<int16_t> field{};
  bool won = false;
  int32_t steps = 0;
  int32_t max_steps = 0;
  int32_t width = 0;
  int32_t height = 0;
};

struct GameState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GameStateT NativeTableType;
  typedef GameStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD = 4,
    VT_WON = 6,
    VT_STEPS = 8,
    VT_MAX_STEPS = 10,
    VT_WIDTH = 12,
    VT_HEIGHT = 14
  };
  const flatbuffers::Vector<int16_t> *field() const {
    return GetPointer<const flatbuffers::Vector<int16_t> *>(VT_FIELD);
  }
  bool won() const {
    return GetField<uint8_t>(VT_WON, 0) != 0;
  }
  int32_t steps() const {
    return GetField<int32_t>(VT_STEPS, 0);
  }
  int32_t max_steps() const {
    return GetField<int32_t>(VT_MAX_STEPS, 0);
  }
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return true;
  }
  GameStateT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GameStateT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GameState> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GameStateT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GameStateBuilder {
  typedef GameState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field(flatbuffers::Offset<flatbuffers::Vector<int16_t>> field) {
    fbb_.AddOffset(GameState::VT_FIELD, field);
  }
  void add_won(bool won) {
    fbb_.AddElement<uint8_t>(GameState::VT_WON, static_cast<uint8_t>(won), 0);
  }
  void add_steps(int32_t steps) {
    fbb_.AddElement<int32_t>(GameState::VT_STEPS, steps, 0);
  }
  void add_max_steps(int32_t max_steps) {
    fbb_.AddElement<int32_t>(GameState::VT_MAX_STEPS, max_steps, 0);
  }
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(GameState::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(GameState::VT_HEIGHT, height, 0);
  }
  explicit GameStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GameState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GameState>(end);
    return o;
  }
};

inline flatbuffers::Offset<GameState> CreateGameState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int16_t>> field = 0,
    bool won = false,
    int32_t steps = 0,
    int32_t max_steps = 0,
    int32_t width = 0,
    int32_t height = 0) {
  GameStateBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_max_steps(max_steps);
  builder_.add_steps(steps);
  builder_.add_field(field);
  builder_.add_won(won);
  return builder_.Finish();
}

inline flatbuffers::Offset<GameState> CreateGameStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *field = nullptr,
    bool won = false,
    int32_t steps = 0,
    int32_t max_steps = 0,
    int32_t width = 0,
    int32_t height = 0) {
  auto field__ = field ? _fbb.CreateVector<int16_t>(*field) : 0;
  return Game::model::CreateGameState(
      _fbb,
      field__,
      won,
      steps,
      max_steps,
      width,
      height);
}

flatbuffers::Offset<GameState> CreateGameState(flatbuffers::FlatBufferBuilder &_fbb, const GameStateT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GameStateT *GameState::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GameStateT>(new GameStateT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GameState::UnPackTo(GameStateT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = field(); if (_e) { _o->field.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->field[_i] = _e->Get(_i); } } }
  { auto _e = won(); _o->won = _e; }
  { auto _e = steps(); _o->steps = _e; }
  { auto _e = max_steps(); _o->max_steps = _e; }
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
}

inline flatbuffers::Offset<GameState> GameState::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GameStateT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGameState(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GameState> CreateGameState(flatbuffers::FlatBufferBuilder &_fbb, const GameStateT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GameStateT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _field = _o->field.size() ? _fbb.CreateVector(_o->field) : 0;
  auto _won = _o->won;
  auto _steps = _o->steps;
  auto _max_steps = _o->max_steps;
  auto _width = _o->width;
  auto _height = _o->height;
  return Game::model::CreateGameState(
      _fbb,
      _field,
      _won,
      _steps,
      _max_steps,
      _width,
      _height);
}

inline const Game::model::GameState *GetGameState(const void *buf) {
  return flatbuffers::GetRoot<Game::model::GameState>(buf);
}

inline const Game::model::GameState *GetSizePrefixedGameState(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Game::model::GameState>(buf);
}

inline bool VerifyGameStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Game::model::GameState>(nullptr);
}

inline bool VerifySizePrefixedGameStateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Game::model::GameState>(nullptr);
}

inline void FinishGameStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Game::model::GameState> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameStateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Game::model::GameState> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<Game::model::GameStateT> UnPackGameState(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Game::model::GameStateT>(GetGameState(buf)->UnPack(res));
}

inline std::unique_ptr<Game::model::GameStateT> UnPackSizePrefixedGameState(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<Game::model::GameStateT>(GetSizePrefixedGameState(buf)->UnPack(res));
}

}  // namespace model
}  // namespace Game

#endif  // FLATBUFFERS_GENERATED_GAMESTATE_GAME_MODEL_H_
